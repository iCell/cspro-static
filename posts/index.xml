<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on CS Pro</title>
    <link>https://cspro.xyz/posts/</link>
    <description>Recent content in Posts on CS Pro</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>cn</language>
    <copyright>&amp;copy; &lt;a href=&#34;https://github.com/iCell&#34;&gt;iCell&lt;/a&gt; 2020</copyright>
    <lastBuildDate>Tue, 19 May 2020 20:42:10 +0900</lastBuildDate>
    
	<atom:link href="https://cspro.xyz/posts/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>数据是如何查询的：单趟扫描算法</title>
      <link>https://cspro.xyz/database/4/</link>
      <pubDate>Tue, 19 May 2020 20:42:10 +0900</pubDate>
      
      <guid>https://cspro.xyz/database/4/</guid>
      <description>&lt;p&gt;之前的几篇文章中，我们介绍了数据库中的数据是如何存储、以怎样的结构组织来便于我们进行数据查找的。当我们在进行数据库操作时，绝大部分情况下都是在以编写 SQL 的方式来进行数据的查询、更新等操作，SQL 为我们在上层抽象出了数据的查询方式，而至于输入 SQL 之后到数据库给出数据之间，数据库其实做了一系列非常复杂的操作，包括解析 SQL 语句（parse）、优化查询（query rewrite）以及最终的执行查询操作（query execute）。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>并发下的 B&#43; Tree</title>
      <link>https://cspro.xyz/database/3/</link>
      <pubDate>Thu, 09 Apr 2020 13:25:10 +0900</pubDate>
      
      <guid>https://cspro.xyz/database/3/</guid>
      <description>&lt;p&gt;并发度是一个数据库性能极其重要的指标之一，并发下的索引查询、更新表现也直接决定了整个数据库的性能。在上一篇文章中我们介绍了&lt;a href=&#34;http://cspro.xyz/database/2/&#34;&gt;基于 B+ Tree 的索引实现&lt;/a&gt;，在这个较为复杂的数据结构下，单线程的数据更新可能就会带来多个节点的合并或者分裂操作，那么并发情况下针对于 B+ Tree 的查询和更新又要如何进行，本文将基于此问题进行大致的介绍。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>基于 B&#43; Tree 的索引实现</title>
      <link>https://cspro.xyz/database/2/</link>
      <pubDate>Thu, 26 Mar 2020 22:20:12 +0900</pubDate>
      
      <guid>https://cspro.xyz/database/2/</guid>
      <description>&lt;p&gt;大量的数据在磁盘中存储后，如何高效地对部分数据进行检索，此时就必须要用到索引了。就像翻阅一本书时，通过目录就可以定位到要查阅的内容在书中的哪一页，这里的目录就相当于数据库中的索引。如何实现数据库索引，选用怎样的数据结构，直接影响着数据库的查询效率。本文会通过介绍 B Tree 的实现，来引出数据库索引最广泛采用的数据结构 B+ Tree。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>数据库中数据的组织形式</title>
      <link>https://cspro.xyz/database/1/</link>
      <pubDate>Tue, 10 Mar 2020 23:55:34 +0900</pubDate>
      
      <guid>https://cspro.xyz/database/1/</guid>
      <description>&lt;p&gt;数据库无疑是负责数据存储和管理的，那么数据的存储媒介就作为整个数据库中最重要的一个组件存在，它的性能以及管理数据的方式直接决定了整个数据库的性能。绝大部分的数据库管理系统（Database Management System）都是使用磁盘作为存储介质，而面对着海量的数据以及给定的成本，不能够一味地使用性能最好的存储媒介，比如 HDD 可以存储的数据量很大但是 IO 很慢，而 DRAM 或者 CPU Caches 的数据存取速度极快，但是使用成本特别高且它们是数据易失的，因此我们必须要在性能和成本之间寻找到平衡。本文通过介绍数据库中数据的组织方式，并以此利用局部性和多级别存储来加快数据的存取速度。&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>